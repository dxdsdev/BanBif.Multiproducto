//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BanBif.Multiproducto.DA
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class panelEntities : DbContext
    {
        public panelEntities()
            : base("name=panelEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<MULTIPRODUCTOS_CLIENTE> MULTIPRODUCTOS_CLIENTE { get; set; }
        public virtual DbSet<MULTIPRODUCTOS_PRODUCTO> MULTIPRODUCTOS_PRODUCTO { get; set; }
        public virtual DbSet<MULTIPRODUCTOS_SOLICITUD> MULTIPRODUCTOS_SOLICITUD { get; set; }
        public virtual DbSet<MULTIPRODUCTOS_LOG> MULTIPRODUCTOS_LOG { get; set; }
        public virtual DbSet<MULTIPRODUCTOS_TOKEN> MULTIPRODUCTOS_TOKEN { get; set; }
    
        public virtual ObjectResult<SP_MULTIPRODUCTO_CONSULTAR_X_DNI_Result> SP_MULTIPRODUCTO_CONSULTAR_X_DNI(string dni)
        {
            var dniParameter = dni != null ?
                new ObjectParameter("dni", dni) :
                new ObjectParameter("dni", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MULTIPRODUCTO_CONSULTAR_X_DNI_Result>("SP_MULTIPRODUCTO_CONSULTAR_X_DNI", dniParameter);
        }
    
        public virtual ObjectResult<SP_MULTIPRODUCTO_OBTENER_PRODUCTOS_Result> SP_MULTIPRODUCTO_OBTENER_PRODUCTOS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MULTIPRODUCTO_OBTENER_PRODUCTOS_Result>("SP_MULTIPRODUCTO_OBTENER_PRODUCTOS");
        }
    
        public virtual ObjectResult<SP_MULTIPRODUCTO_OBTENER_PRODUCTOS_SEGMENTO_Result> SP_MULTIPRODUCTO_OBTENER_PRODUCTOS_SEGMENTO(Nullable<int> segmento)
        {
            var segmentoParameter = segmento.HasValue ?
                new ObjectParameter("segmento", segmento) :
                new ObjectParameter("segmento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MULTIPRODUCTO_OBTENER_PRODUCTOS_SEGMENTO_Result>("SP_MULTIPRODUCTO_OBTENER_PRODUCTOS_SEGMENTO", segmentoParameter);
        }
    
        public virtual int SP_MULTIPRODUCTO_REGISTRAR_LOG(string dni, Nullable<int> accion, string detalle)
        {
            var dniParameter = dni != null ?
                new ObjectParameter("dni", dni) :
                new ObjectParameter("dni", typeof(string));
    
            var accionParameter = accion.HasValue ?
                new ObjectParameter("accion", accion) :
                new ObjectParameter("accion", typeof(int));
    
            var detalleParameter = detalle != null ?
                new ObjectParameter("detalle", detalle) :
                new ObjectParameter("detalle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MULTIPRODUCTO_REGISTRAR_LOG", dniParameter, accionParameter, detalleParameter);
        }
    
        public virtual int SP_MULTIPRODUCTO_REGISTRAR_SOLICITUD(Nullable<int> productoid, Nullable<int> clienteid, string ipcliente)
        {
            var productoidParameter = productoid.HasValue ?
                new ObjectParameter("productoid", productoid) :
                new ObjectParameter("productoid", typeof(int));
    
            var clienteidParameter = clienteid.HasValue ?
                new ObjectParameter("clienteid", clienteid) :
                new ObjectParameter("clienteid", typeof(int));
    
            var ipclienteParameter = ipcliente != null ?
                new ObjectParameter("ipcliente", ipcliente) :
                new ObjectParameter("ipcliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MULTIPRODUCTO_REGISTRAR_SOLICITUD", productoidParameter, clienteidParameter, ipclienteParameter);
        }
    
        public virtual int SP_MULTIPRODUCTO_REGISTRAR_TOKEN(string dni, Nullable<int> token, Nullable<bool> validado)
        {
            var dniParameter = dni != null ?
                new ObjectParameter("dni", dni) :
                new ObjectParameter("dni", typeof(string));
    
            var tokenParameter = token.HasValue ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(int));
    
            var validadoParameter = validado.HasValue ?
                new ObjectParameter("validado", validado) :
                new ObjectParameter("validado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MULTIPRODUCTO_REGISTRAR_TOKEN", dniParameter, tokenParameter, validadoParameter);
        }
    }
}
